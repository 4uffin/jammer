name: Build and Release AppImage

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger the workflow on version tags

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libfuse2

      - name: Download appimagetool
        run: |
          wget -q https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Build project
        run: |
          cd Jammer.CLI
          dotnet publish -r linux-x64 -c Release /p:PublishSingleFile=true
          cd ..
          mkdir -p jammer.AppDir/usr/{bin,lib,locales}
          cp -v Jammer.CLI/bin/Release/net8.0/linux-x64/publish/Jammer.CLI jammer.AppDir/usr/bin/Jammer
          cp -v Jammer.CLI/bin/Release/net8.0/linux-x64/publish/libuiohook.so jammer.AppDir/usr/lib/libuiohook.so
          cp -v libs/linux/x86_64/libbass* jammer.AppDir/usr/lib
          cp -v locales/* jammer.AppDir/usr/locales
          cp -v jammer-wrapper.sh jammer.AppDir/usr/bin/jammer-wrapper

      - name: Create AppImage
        run: ARCH=x86_64 ./appimagetool-x86_64.AppImage jammer.AppDir jammer-$(cat VERSION)-x86_64.AppImage

      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v3
        with:
          name: jammer-AppImage
          path: jammer-*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download AppImage artifact
        uses: actions/download-artifact@v3
        with:
          name: jammer-AppImage
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload AppImage to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./jammer-*.AppImage
          asset_name: jammer-$(cat VERSION)-x86_64.AppImage
          asset_content_type: application/octet-stream
